global
  # to have these messages end up in /var/log/haproxy.log you will
  # need to:
  #
  # 1) configure syslog to accept network log events.  This is done
  #    by adding the '-r' option to the SYSLOGD_OPTIONS in
  #    /etc/sysconfig/syslog
  #
  # 2) configure local2 events to go to the /var/log/haproxy.log
  #   file. A line like the following can be added to
  #   /etc/sysconfig/syslog
  #
  #    local2.*                       /var/log/haproxy.log
  #
  log         stdout local2 debug
  log-send-hostname

  #chroot      /usr/local/lib/
  pidfile     /tmp/haproxy2.pid
  maxconn     4000
  user        haproxy
  group       haproxy
  daemon

  # turn on stats unix socket
  stats socket /tmp/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
  mode                    http
  log                     global
  option                  dontlognull
  option                  redispatch
  timeout queue           1m
  timeout connect         10s
  timeout client          1m
  timeout server          1m
  timeout check           10s
  maxconn                 3000

listen stats
  bind 0.0.0.0:${STATS_PORT}
  mode http
  log global
  maxconn 10
  option httplog
  stats enable
  stats refresh 30s
  stats show-node
  stats uri /stats

frontend haproxy
  bind 0.0.0.0:${FRONT_PORT}
  mode http

  acl is_backend path_beg /backend/

  use_backend backend_service if is_backend
  default_backend not_found

backend not_found
  http-request return status 404 content-type "application/json" string "{ \"message\": \"Not found\" }"

backend backend_service
  balance roundrobin

  http-request set-path "%[path,regsub(^/backend/,/)]"

  # Create storage for tracking client info
  stick-table  type string  size 1  expire 30s  store http_req_rate(10s),gpc0,gpc0_rate(10s),gpc1

  # Is the circuit broken?
  acl circuit_open be_name,table_gpc1 gt 0

  # Reject request if circuit is broken
  http-request return status 503 content-type "application/json" string "{ \"message\": \"Circuit Breaker tripped\" }" if circuit_open

  # Begin tracking requests
  http-request track-sc0 be_name

  # Count HTTP 5xx server errors
  http-response sc-inc-gpc0(0) if { status ge 500 }

  # Store the HTTP request rate and error rate in variables
  http-response set-var(res.req_rate) sc_http_req_rate(0)
  http-response set-var(res.err_rate) sc_gpc0_rate(0)

  # Check if error rate is greater than 50% using some math
  http-response sc-inc-gpc1(0) if { int(100),mul(res.err_rate),div(res.req_rate) gt 50 }

  server s1 ${BACKEND_SERVER_1}:${BACKEND_SERVER_PORT} check
  server s2 ${BACKEND_SERVER_2}:${BACKEND_SERVER_PORT} check
