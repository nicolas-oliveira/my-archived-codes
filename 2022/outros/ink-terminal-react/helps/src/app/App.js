const React = require('react');
const { useState, useEffect } = require('react');
const importJsx = require('import-jsx');
const { exec } = require("child_process");

const { Text, Box, useInput } = require('ink');

const data = [
  "aa-remove-unknown",
  "aa-status",
  "aa-teardown",
  "accessdb",
  "acpid",
  "addgnupghome",
  "addgroup",
  "add-shell",
  "adduser",
  "agetty",
  "airbase-ng",
  "aireplay-ng",
  "airmon-ng",
  "airodump-ng",
  "airodump-ng-oui-update",
  "airserv-ng",
  "airtun-ng",
  "airventriloquist-ng",
  "alsabat-test",
  "alsactl",
  "alsa-info",
  "anacron",
  "apparmor_parser",
  "apparmor_status",
  "applygnupgdefaults",
  "arp",
  "arpd",
  "arptables",
  "arptables-nft",
  "arptables-nft-restore",
  "arptables-nft-save",
  "arptables-restore",
  "arptables-save",
  "aspell-autobuildhash",
  "avahi-autoipd",
  "avahi-daemon",
  "badblocks",
  "besside-ng",
  "biosdecode",
  "blkdeactivate",
  "blkdiscard",
  "blkid",
  "blkzone",
  "blockdev",
  "bluetoothd",
  "bridge",
  "capsh",
  "cfdisk",
  "cgdisk",
  "chat",
  "chcpu",
  "chgpasswd",
  "chmem",
  "chpasswd",
  "chroot",
  "cpgr",
  "cppw",
  "cron",
  "cryptdisks_start",
  "cryptdisks_stop",
  "cryptsetup",
  "cryptsetup-reencrypt",
  "ctrlaltdel",
  "cupsaccept",
  "cups-browsed",
  "cupsctl",
  "cupsd",
  "cupsdisable",
  "cupsenable",
  "cupsfilter",
  "cupsreject",
  "debugfs",
  "delgroup",
  "deluser",
  "depmod",
  "devlink",
  "dhclient",
  "dhclient-script",
  "dmidecode",
  "dmsetup",
  "dmstats",
  "dnsmasq",
  "dosfsck",
  "dosfslabel",
  "dpkg-fsys-usrunmess",
  "dpkg-preconfigure",
  "dpkg-reconfigure",
  "dumpe2fs",
  "dump.exfat",
  "e2freefrag",
  "e2fsck",
  "e2image",
  "e2label",
  "e2mmpstatus",
  "e2scrub",
  "e2scrub_all",
  "e2undo",
  "e4crypt",
  "e4defrag",
  "easside-ng",
  "ebtables",
  "ebtables-nft",
  "ebtables-nft-restore",
  "ebtables-nft-save",
  "ebtables-restore",
  "ebtables-save",
  "ethtool",
  "exfatlabel",
  "exicyclog",
  "exigrep",
  "exim",
  "exim4",
  "exim_checkaccess",
  "exim_convert4r4",
  "exim_dbmbuild",
  "exim_dumpdb",
  "exim_fixdb",
  "exim_lock",
  "eximstats",
  "exim_tidydb",
  "exinext",
  "exipick",
  "exiqgrep",
  "exiqsumm",
  "exiwhat",
  "faillock",
  "fatlabel",
  "fdformat",
  "fdisk",
  "filefrag",
  "findfs",
  "fixparts",
  "fsck",
  "fsck.btrfs",
  "fsck.cramfs",
  "fsck.exfat",
  "fsck.ext2",
  "fsck.ext3",
  "fsck.ext4",
  "fsck.fat",
  "fsck.minix",
  "fsck.msdos",
  "fsck.vfat",
  "fsfreeze",
  "fstab-decode",
  "fstrim",
  "gdisk",
  "genl",
  "getcap",
  "getpcaps",
  "getty",
  "gparted",
  "gpartedbin",
  "groupadd",
  "groupdel",
  "groupmems",
  "groupmod",
  "grpck",
  "grpconv",
  "grpunconv",
  "grub-install",
  "grub-macbless",
  "grub-mkconfig",
  "grub-mkdevicemap",
  "grub-probe",
  "grub-reboot",
  "grub-set-default",
  "halt",
  "haveged",
  "hwclock",
  "hwloc-dump-hwdata",
  "i2cdetect",
  "i2cdump",
  "i2cget",
  "i2cset",
  "i2c-stub-from-dump",
  "i2ctransfer",
  "iconvconfig",
  "ifconfig",
  "ifdown",
  "ifquery",
  "ifup",
  "iio-sensor-proxy",
  "init",
  "insmod",
  "installkernel",
  "install-menu",
  "install-sgmlcatalog",
  "integritysetup",
  "invoke-rc.d",
  "ip",
  "ip6tables",
  "ip6tables-apply",
  "ip6tables-legacy",
  "ip6tables-legacy-restore",
  "ip6tables-legacy-save",
  "ip6tables-nft",
  "ip6tables-nft-restore",
  "ip6tables-nft-save",
  "ip6tables-restore",
  "ip6tables-restore-translate",
  "ip6tables-save",
  "ip6tables-translate",
  "ipmaddr",
  "ippeveprinter",
  "ipp-usb",
  "iptables",
  "iptables-apply",
  "iptables-legacy",
  "iptables-legacy-restore",
  "iptables-legacy-save",
  "iptables-nft",
  "iptables-nft-restore",
  "iptables-nft-save",
  "iptables-restore",
  "iptables-restore-translate",
  "iptables-save",
  "iptables-translate",
  "iptunnel",
  "isadump",
  "isaset",
  "isosize",
  "ispell-autobuildhash",
  "iw",
  "iwconfig",
  "iwevent",
  "iwgetid",
  "iwlist",
  "iwpriv",
  "iwspy",
  "kbdrate",
  "key.dns_resolver",
  "killall5",
  "ldattach",
  "ldconfig",
  "libgvc6-config-update",
  "locale-gen",
  "logrotate",
  "logsave",
  "losetup",
  "lpadmin",
  "lpc",
  "lpinfo",
  "lpmove",
  "lsmod",
  "luksformat",
  "lynis",
  "make-ssl-cert",
  "mariadbd",
  "mdadm",
  "mdmon",
  "mii-tool",
  "mkdosfs",
  "mke2fs",
  "mkfs",
  "mkfs.bfs",
  "mkfs.btrfs",
  "mkfs.cramfs",
  "mkfs.exfat",
  "mkfs.ext2",
  "mkfs.ext3",
  "mkfs.ext4",
  "mkfs.fat",
  "mkfs.minix",
  "mkfs.msdos",
  "mkfs.ntfs",
  "mkfs.vfat",
  "mkhomedir_helper",
  "mkinitramfs",
  "mklost+found",
  "mkntfs",
  "mkswap",
  "ModemManager",
  "modinfo",
  "modprobe",
  "mount.fuse",
  "mount.fuse3",
  "mount.fuse.sshfs",
  "mount.lowntfs-3g",
  "mount.ntfs",
  "mount.ntfs-3g",
  "mount.sshfs",
  "mysqld",
  "nameif",
  "netscsid",
  "NetworkManager",
  "newusers",
  "nfnl_osf",
  "nft",
  "nologin",
  "ntfsclone",
  "ntfscp",
  "ntfslabel",
  "ntfsresize",
  "ntfsundelete",
  "on_ac_power",
  "ownership",
  "pam-auth-update",
  "pam_getenv",
  "pam_timestamp_check",
  "paperconfig",
  "parted",
  "partprobe",
  "pivot_root",
  "plipconfig",
  "plymouthd",
  "plymouth-set-default-theme",
  "policy-rc.d",
  "poweroff",
  "powertop",
  "pppd",
  "pppdump",
  "pppoe-discovery",
  "pppstats",
  "pwck",
  "pwconv",
  "pwunconv",
  "rarp",
  "raw",
  "readprofile",
  "reboot",
  "remove-default-ispell",
  "remove-default-wordlist",
  "remove-shell",
  "request-key",
  "resize2fs",
  "rfkill",
  "rmail",
  "rmmod",
  "rmt",
  "rmt-tar",
  "route",
  "rsmtp",
  "rsyslogd",
  "rtacct",
  "rtcwake",
  "rtkitctl",
  "rtmon",
  "runlevel",
  "runq",
  "runuser",
  "samba_kcc",
  "saned",
  "select-default-ispell",
  "select-default-wordlist",
  "sendmail",
  "sensors-detect",
  "service",
  "setcap",
  "setvesablank",
  "sfdisk",
  "sgdisk",
  "shadowconfig",
  "shutdown",
  "slattach",
  "smartctl",
  "smartd",
  "start-stop-daemon",
  "sudo_logsrvd",
  "sudo_sendlog",
  "sulogin",
  "su-to-root",
  "swaplabel",
  "swapoff",
  "swapon",
  "switch_root",
  "sysctl",
  "syslog2eximlog",
  "tarcat",
  "tc",
  "tcptraceroute",
  "tcptraceroute.db",
  "telinit",
  "tipc",
  "tkiptun-ng",
  "traceroute",
  "tune2fs",
  "tune.exfat",
  "tzconfig",
  "umount.udisks2",
  "unix_chkpwd",
  "unix_update",
  "update-ca-certificates",
  "update-catalog",
  "update-default-aspell",
  "update-default-ispell",
  "update-default-wordlist",
  "update-dictcommon-aspell",
  "update-dictcommon-hunspell",
  "update-exim4.conf",
  "update-exim4.conf.template",
  "update-exim4defaults",
  "update-fonts-alias",
  "update-fonts-dir",
  "update-fonts-scale",
  "update-grub",
  "update-grub2",
  "update-gsfontmap",
  "update-icon-caches",
  "update-ieee-data",
  "update-inetd",
  "update-info-dir",
  "update-initramfs",
  "update-locale",
  "update-passwd",
  "update-pciids",
  "update-rc.d",
  "update-secureboot-policy",
  "update-smart-drivedb",
  "update-xmlcatalog",
  "usb_modeswitch",
  "usb_modeswitch_dispatcher",
  "usbmuxd",
  "useradd",
  "userdel",
  "usermod",
  "uuidd",
  "validlocale",
  "vcstime",
  "veritysetup",
  "vigr",
  "vipw",
  "visudo",
  "vpddecode",
  "wesside-ng",
  "wipefs",
  "wpa_action",
  "wpa_cli",
  "wpa_supplicant",
  "xtables-legacy-multi",
  "xtables-monitor",
  "xtables-nft-multi",
  "zic",
  "zramctl"
]

const App = () => {
  const page = 15;
  const [position, setPosition] = useState(0);
  const [command, setCommand] = useState(data[0]);

  useInput((input, key) =>  {
    if(position === 0) {
      if(key.downArrow) setPosition(position + 1);
    }
    if(position === page - 1) {
      if(key.upArrow) setPosition(position - 1);
    }
    if(position > 0 && position < page - 1) {
      if(key.downArrow) setPosition(position + 1);
      if(key.upArrow) setPosition(position - 1);
    }
  });
  // useInput((input, key) => console.log(`userinput: "${input}"`))

  return (
    <Box height="100%" width="100%" flexDirection='column' borderStyle='single'>
      <Box alignItems='center' justifyContent='center'>
        <Text>MANUALS v0.1</Text>
      </Box>
      <Box flexDirection='row' flexGrow={1}>
        <Box borderStyle='single' flexDirection='column' padding={1}>
          { 
            data.map((command, index) => {
              if(index < page)
                if(position === index) {
                  setCommand(command);
                  return <Text 
                            key={`${command}${index}`} 
                            color='black' 
                            backgroundColor='white'
                          >
                          {command}
                          </Text>
                } else {
                  return <Text 
                            key={`${command}${index}`} 
                          >
                          {command}
                          </Text>
                } 
            })
          }
        </Box>
        <Box>
          {
            exec(`man ${command}`, (error, stdout, stderr) => {
              if (error) {
                console.log(`error: ${error.message}`);
                return;
              }
              if (stderr) {
                console.log(`stderr: ${stderr}`);
                return;
              }
              return <Text>{`${stdout}`}</Text>
            })
          }

        </Box>
      </Box>
    </Box>
  
  )
}

module.exports = App;